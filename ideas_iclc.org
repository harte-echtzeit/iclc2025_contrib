* IDEAS ICLC
This is a collection of my ideas for the ICLC paper I'm planning. Its going to be a short one (2-4 pages). Maybe accompanied by a performance.

** title
NaN (Not-a-Notation) - can petri-nets be utilized as an interactive notation for live coding?

** submitted abstract (2024-09-22)
Usually, the "liveness" in live coding performances is either done by playing from scratch or by utilizing some prepared parts/phrases which are used by the artists to alter or improvise on. Very rarely, input from audience is included.
This work will explore if and how petri-nets can be utilized as an interface for external input. It will investigate how a meta-language based on petri nets can help to control the flow of a live coding performance, alter its structure and patterns, visualize it and more abstractly serve as a notation. It will be analyzed how it can aid an artist in writing a notation for tracks while also maintaining flexibility for external inputs like an audience, situations and instruments. After an introduction to petri nets, a simple example for an implementation in tidal cycles is given. The opportunities for such an approach as well as development possibilities for other live coding languages are discussed. This paper submission is accompanied by a proposal for a performance to test the approaches in a live situation.

** motivation and scope
Live coding has eveloved as an artistic praxis drastically in terms of approaches, technologies, genres and styles. Apart from technical detail, the increasing number of users has also brought an increasing number of approaches to perform in an actual live situation. However, altough various in their detailed approaches, most performances can be catagorized into two techniques: prepared code and from-scratch. Here, pure from-scratch sessions are similar to improvisation practices in other forms of musical performance which are driven by the artists experience and attention in the moment. Performances which work based on prepared parts such as phrases or song structures are often used to improvise on while the prepared code and ist comments are used as a very raw form of notation. Very rarely, the audience is included in performances by utilizing different interfaces.
*** Notation systems status-quo
In the world of musical performance, playing from sheet is the de-facto standard which implies a common notation system. In Western music, staff notation has developed as the quasi standard for musical representation, [LIT]. During the developemnt of more experimental genres of modern music, notable composers such as Steve Reich, John Cage and others developed their own more graphical notation of music, [LIT]. Artists such as Mark Applebaum and Hans-Christoph Steiner have developed these graphical notations even further by utilizing software such as Pure Data, [LIT]. Usually most of the notation systems strive for the following features:
- abstract, most instrument-independent notation of pitches, rhythms, 
- description of the flow of time or a progression
- visual clue of the structure and therefore visual guidance
- enable reproducibility of a musical piece
- sometimes enables decision making (e.g. choice or improvisation options)
Live coding seems to blur the line between an instrument and a notation, as it partly implements the features mentioned above such as structure given by patterns which are agnostic to the sound played and partly omits them, e.g. as reproducibility and flow of time can be changed drastically by the artist.
The author has himself worked on a very basic nottion system for his own usage, but has com e to the conclusion that this was not able to satisfy the features mentioned above, [GITHUB NaN 0.1].
*** scope of this work
Within this work, it will be investigated how petri-nets, which have already been discussed as a description system for musical applications [LIT], can be utilized for live coding applications. Furthermore, it will be investigated if it can be abstract, time descriptive, visually helpful and enabling reprocuibility of live coded music. Alongside, the aspects how this approach can aid audience interaction and how the perti-net notation can serve as a meta-language which in itself would be interpretatble by a program are discussed briefly. The concept can be graphiaclly summarized as follows, Fig. 1.
[FIG: make a concept sketch here]
** experimental work
*** Petri nets as a suggestion
Petri nets are an abstract way of representing flow of information similar to a state machine, [LIT]. They are have the folllwing properties:
- abstract and very concise 
- no inherent temporal dependency but can be enhanced by it 
- consist of 'places', 'transitions' and 'arcs' where
  - Places hold a state and can act as a switch to enable/prevent flow
  - Transitions change states in Places
  - Arcs deliver auxilliary information
- PN have been used to represent music before (Musimathics and Paper!)

[SKETCH here! showing an abstract 2-Plces one tranition petri-net]
In this sense, petri-nets form very basic building blocks which can be chained together to form simple boolean logic like AND, OR and other operations. This abstract nature allows a very flexible usage and lends itself to implement a very basic notation based on in the proposed sense. 
*** minimal case study - Haskell implementation
Due to their abstract nature, an implementation in a functional manner in =Haskell= is possible

#+BEGIN_SRC haskell
place in_num max_num = if in_num > 0 && in_num <= max_num then True else False
trans in_state = if in_state then 1 else 0
#+END_SRC
Here, a place is defined in its most basic form as a function with an input number of tokens =in_num= and its  maximum number of tokens and =num_max=. Upon calling the function =in_num= is evaluated against zero and binary value is returned. Accordingly, a transition is defined as function whose input is a binary =in_state= which is evaluated and its output is an integer one or zero which can be fed into a place as the =in_num= input. Utilizing these very basic operations a simple petri net as decribed in Fig. 2 can be implemented with the follwing code 
#+BEGIN_SRC haskell
linP b = place (trans (place b 1)) 1
#+END_SRC
In this case the linear petri net =linP= is parametrized with the variable =b= which is used as =in_num= while the =max_num= is fixed at `1` for simplicity. The binary result can be utilized to trigger different musical actions in Tidal Cycles such as a change in patterns
#+BEGIN_SRC haskell
    --define ttwo patterns
  let iclc = "9 3 12 3"
	twentyFive = "2 0 2 5"

  -- a simple boolean pattern switch
  patChoose x = if x then iclc else twentyFive

-- some muscial action which uses different patterns as an input				    
  musicalActionA pat_in =
	d1 $ fast 2
	$ note pat_in
	# s "bass3"
	# cut 1
	# gain 0.9

      -- actual petri-net operation
      do
	let trig = linP 0
	musicalActionA (patChoose trig)
#+END_SRC
In this very basic example, the simple act of pattern switching is abstracted in the =do...musicalAction= phrase.
Based on this atomic structure, it can be envisioned how more complex behaviour can be modeled. One possibility is the combination of multiple linear petri nets as in =linP=
#+BEGIN_SRC haskell
polyP c d = (linP c, linP d)

musicalActionB trig1 trig2
 | trig1 && trig2 = do
      d2 $ s "bd sd ~ bd" 
      d3 $ s "hh*3 cp"     
  | trig1 = do
      d2 $ s "bd sd ~ bd"
      d3 $ silence
  | trig2 = do
      d3 $ s "hh*3 cp"
      d2 $ silence
  | otherwise = do
      d2 $ silence
      d3 $ silence  
-- user defined choice
do
  let (track1, track2) = polyP 0 0
  musicalActionB track1 track2  
#+END_SRC
In this case, the user passes two values to =polyP= which is chaining two =linP= structures. This enables the triggering of four different musical actions. One can clearly see that the possibilities of stcking and combination are huge. Furthermore, an example utilizing a random choice is given in the source file for this paper in the linked git repository.
*** minimal case study - 2 multiple tokens
In a live situation, it might be interesting prepare a temporal structure of phrases to be played and then improvise on them or tweak them interactively. In order to achieve the control of temporal and sequential behaviour using a petri net, the a second kind of transition is to be defined.
#+BEGIN_SRC haskell
trList :: Int -> Bool -> [Int]
trList in_num in_state
  | in_num <= 0 = []
  | otherwise = 1 : trList (in_num - 1) (p (in_num - 1) (in_num - 1))
#+END_SRC
In this definition, the transition emits a list of tokens which can then be processed by a resulting place into a musical action of choice. In the follwong example, the resulting place =playPiece= not only plays a prepared phrase for the number of entries resulting from =trList= but also makes a decision on which phrases should be played according to the value of the current list entry
#+BEGIN_SRC haskell
import Control.Concurrent

-- calculate the cycle time based on the standard CPS rate
cycTime = round(1/0.5625)
-- define some music we want to play
musicalActionC :: Int -> IO ()
musicalActionC x
  | x==1 = do
      once $ fast 2 $ stack[s "bd cp bd sd",
                            note iclc # s "bass3" # cut 1 # gain 0.8]
      waitHere
  | otherwise = do
      once $ fast 2 $ stack[s "hh*8",
                            note twentyFive # s "bass3" # cut 1 # gain 0.8]
      waitHere
  where waitHere = threadDelay (cycTime * 1000000)


-- define a resulting place where multiple tokens are beeing excepted recursively and musical actions are beeing triggered from it (enables also some switching, if desired)

playPiece [] = d1 $ silence
playPiece x
  | head x==1 = do
      musicalActionC 1
      playPiece (tail x)
  | otherwise = do
      musicalActionC 2
      playPiece (tail x)

do
  let token = 2
      times = trList token (place (token-1) token)
  playPiece times
#+END_SRC
It can be easily imagined how this construction can be used to either randomly change the order to the phrases or use physical buttons distributed among the audience to let them decide. A combination of other petri-net structures defined earlier is possible. Chaining the =playPiece= portion and extending it with other variables in order to tune certain parameters within the phrases will allow for an abstract and yet flexible description of the structure of a live coded piece.

(footnote: Sure enough, Tidal Cycles has build-in functions for sequencing, but the aim of the petri-net formalism is to develop a metalanguage/notation which can interact with multiple live coding languages.))
** discussion
This brief work has demonstrated that petri-nets are a possible method to develop a notation as they are absract and can be expressive at the same time. However, the implementation on Haskell is not ideal as it graphically not very expressive and a bit cumbersome. In the future, it would be better to implement it in e.g. Pure Data or any other graphical system. Additionally, it would be interesting to return the values of the petri net as e.g. OSC messages so that multiple other live coding languages can receive the input simulataneously. This would enable interesting multi-artist performances and lead the way to greater abstraction. The authors wants to encourage a more intense discussion on the topic of notation in the live coding community. This could lead the way to the definition of some basic building blocks and symbols which will be the vocabulary of a possible notation system. This definition must be driven by many practicing artists from different backgrounds and live coding languages.
A challange when using the notation in a live setting will be not to obstruct code by the abstraction. In all cases, all code must remain to be shown. The notation should only be a secondary mean of structuring code, performing visualisation and enabling audience interaction.

** summary & outlook
This work showed briefly that petri-nets can act as an abstract notation system for live coding. It has been showing that they can be utilized for simple decision making and timing procedures by a basic implementation in Haskell / Tidal Cycles.
This work is supposed to give only an initial impulse for the topic and leaves therefore a lot of open tasks and questions. Some of them are:
- Is the proposed notation system capable of beeing used in live and studio situations?
- Can we utlize a different environment such as Pure Data in order to visualize the notation and act as hub for controlling multiple live codig environments with the notation simultaneously?
- Is the level of abstraction enough to use it flexible with different live coding languages and is it expressive enough to be digested by an audience as well as by th artists?
This proposed system is still in an early stage and will be tested during the ICLC 2025 conference in a live performance. Furthermore, the author encourages the reader to play with the code and make adaptions or translations as needed, [[https://github.com/harte-echtzeit/not-a-notation][link]].
