* IDEAS ICLC
This is a collection of my ideas for the ICLC paper I'm planning. Its going to be a short one (2-4 pages). Maybe accompanied by a performance.

** title
NaN (Not-a-Notation) - can petri-nets be utilized as an interactive notation for live coding?

** submitted abstract (2024-09-22)
Usually, the "liveness" in live coding performances is either done by playing from scratch or by utilizing some prepared parts/phrases which are used by the artists to alter or improvise on. Very rarely, input from audience is included.
This work will explore if and how petri-nets can be utilized as an interface for external input. It will investigate how a meta-language based on petri nets can help to control the flow of a live coding performance, alter its structure and patterns, visualize it and more abstractly serve as a notation. It will be analyzed how it can aid an artist in writing a notation for tracks while also maintaining flexibility for external inputs like an audience, situations and instruments. After an introduction to petri nets, a simple example for an implementation in tidal cycles is given. The opportunities for such an approach as well as development possibilities for other live coding languages are discussed. This paper submission is accompanied by a proposal for a performance to test the approaches in a live situation.

** motivation and scope
Live coding has eveloved as an artistic praxis drastically in terms of approaches, technologies, genres and styles. Apart from technical detail, the increasing number of users has also brought an increasing number of approaches to perform in an actual live situation. However, altough various in their detailed approaches, most performances can be catagorized into two techniques: prepared code and from-scratch. Here, pure from-scratch sessions are similar to improvisation practices in other forms of musical performance which are driven by the artists experience and attention in the moment. Performances which work based on prepared parts such as phrases or song structures are often used to improvise on while the prepared code and ist comments are used as a very raw form of notation. Very rarely, the audience is included in performances by utilizing different interfaces.
*** Notation systems status-quo
In the world of musical performance, playing from sheet is the de-facto standard which implies a common notation system. In Western music, staff notation has developed as the quasi standard for musical representation, [LIT]. During the developemnt of more experimental genres of modern music, notable composers such as Steve Reich, John Cage and others developed their own more graphical notation of music, [LIT]. Artists such as Mark Applebaum and Hans-Christoph Steiner have developed these graphical notations even further by utilizing software such as Pure Data, [LIT]. Usually most of the notation systems strive for the following features:
- abstract, most instrument-independent notation of pitches, rhythms, 
- description of the flow of time or a progression
- visual clue of the structure and therefore visual guidance
- enable reproducibility of a musical piece
- sometimes enables decision making (e.g. choice or improvisation options)
Live coding seems to blur the line between an instrument and a notation, as it partly implements the features mentioned above such as structure given by patterns which are agnostic to the sound played and partly omits them, e.g. as reproducibility and flow of time can be changed drastically by the artist.
The author has himself worked on a very basic nottion system for his own usage, but has com e to the conclusion that this was not able to satisfy the features mentioned above, [GITHUB NaN 0.1].
*** scope of this work
Within this work, it will be investigated how petri-nets, which have already been discussed as a description system for musical applications [LIT], can be utilized for live coding applications. Furthermore, it will be investigated if it can be abstract, time descriptive, visually helpful and enabling reprocuibility of live coded music. Alongside, the aspects how this approach can aid audience interaction and how the perti-net notation can serve as a meta-language which in itself would be interpretatble by a program are discussed briefly. The concept can be graphiaclly summarized as follows, Fig. 1.
[FIG: make a concept sketch here]
** experimental work
*** Petri nets as a suggestion
Petri nets are an abstract way of representing flow of information similar to a state machine, [LIT]. They are have the folllwing properties:
- abstract and very concise 
- no inherent temporal dependency but can be enhanced by it 
- consist of 'places', 'transitions' and 'arcs' where
  - Places hold a state and can act as a switch to enable/prevent flow
  - Transitions change states in Places
  - Arcs deliver auxilliary information
- PN have been used to represent music before (Musimathics and Paper!)

[SKETCH here! showing an abstract 2-Plces one tranition petri-net]
In this sense, petri-nets form very basic building blocks which can be chained together to form simple boolean logic like AND, OR and other operations. This abstract nature allows a very flexible usage and lends itself to implement a very basic notation based on in the proposed sense. 
*** minimal case study - tidal cycles single performer
Due to their abstract nature, an implementation in a functional manner in =Haskell= is possible

#+BEGIN_SRC haskell
  place in_num curr_num max_num
    | in_num + curr_num <= 0 = False
    | in_num + curr_num > max_num = False
    | otherwise = True

  trans in_state = if in_state then 1 else 0
#+END_SRC
Here, a place is defined in its most basic form as a function with an input number of tokens =in_num=, a  current number of tokens =num_curr= and its  maximum number of tokens and =num_max=. Upon calling the function with the sum of =in_num= and =curr_num= andthese inputs, it is evaluate as binary output as =True= if they are larger than zero and not more than =max_num= tokens are beeing used. Accordingly, a transition is defined as function whos input is a binary state which is evaluated and its output is an integer one or zero which can be fed into a place as the =in_num= input. Utilizing these very basic operations a simple petri net as decribed in Fig. 2 can be implemented with the follwing code 
#+BEGIN_SRC haskell
  linP b = place (trans_num (place b b 3)) b 4
#+END_SRC
In this case the linear petri net =linP= is parametrized with the variable =b= which is used as =in_num= and =curr_num= for simplicity. The binary result can be utilized to trigger different musical actions in Tidal Cycles such as a change in patterns
#+BEGIN_SRC haskell
  TIDAL CODE HERE
#+END_SRC



- in a minimal example I write a small piece (drums and melody) which can performed with two different patterns and I trigger the pattern in between and maybe also the pitch (piano?)
In a 
*** minimal case study - 2 midi input from audience
- same as befor but triggered from audience
** discussion
- what is the experience with it and what is maybe not working so
  great?
- discuss if the requirements (abstract, etc) have been met
** summary & outlook
This work showed briefly that petri-nets can act as an abstract nottion system for live coding. It has been showing that they can be utilized for simple decision making and timing procedures by a basic implementation in Haskell / Tidal Cycles.
This work is supposed to give only an initial impulse for the topic and leaves therefore a lot of open tasks and questions. Some of them are:
- Is the proposed notation system capable of beeing used in live and studio situations?
- Can we utlize a different environment such as Pure Data in order to visualize the notation and act as hub for controlling multiple live codig environments with the notation simultaneously?
- Is the level of abstraction enough to use it flexible with different live coding languages and is it expressive enough to be digested by an audience as well as by th artists?
This proposed system is still in an early stage and will be tested during the ICLC 2025 conference in a live performance. Furthermore, the author encourages the reader to play with the code and make adaptions or translations as needed, [[https://github.com/harte-echtzeit/not-a-notation][link]].
